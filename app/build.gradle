plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'androidx.navigation.safeargs.kotlin'
}

android {
    compileSdkVersion 30

    defaultConfig {
        applicationId "test.sukhov.natife"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "API_KEY", "\"${getProperty("local.properties", "api_key")}\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
    buildFeatures {
        dataBinding true
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$version_kotlin"
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation "androidx.recyclerview:recyclerview:$version_recyclerview"
    implementation 'com.github.bumptech.glide:glide:4.11.0'

    //ktx
    implementation 'androidx.activity:activity-ktx:1.3.0-beta02'
    implementation 'androidx.fragment:fragment-ktx:1.3.5'

    //paging
    implementation 'androidx.paging:paging-runtime-ktx:3.0.0'

    //test
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    //navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    //lifecycle
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$version_lifecycle"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$version_lifecycle"
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

    //coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$version_coroutine"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$version_coroutine"

    //room
    implementation "androidx.room:room-runtime:$version_room"
    kapt "androidx.room:room-compiler:$version_room"
    implementation "androidx.room:room-ktx:$version_room"

    //retrofit
    implementation "com.squareup.moshi:moshi-kotlin:$version_moshi"
    implementation "com.squareup.retrofit2:converter-moshi:$version_retrofit"

    //moshi
    kapt 'com.squareup.moshi:moshi-kotlin-codegen:1.12.0'
    implementation 'com.squareup.moshi:moshi:1.12.0'
    implementation 'com.squareup.moshi:moshi-kotlin:1.12.0'
    implementation 'com.squareup.moshi:moshi-adapters:1.12.0'

    //okhttp
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.1'

    //koin
    implementation 'org.koin:koin-android-viewmodel:2.2.2'
    implementation 'org.koin:koin-android:2.2.2'
}

def getProperty(String filename, String propName) {
    def propsFile = rootProject.file(filename)
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        if (props[propName] != null) {
            return props[propName]
        } else {
            print("No such property " + propName + " in file " + filename)
        }
    } else {
        print(filename + " does not exist!")
    }
}